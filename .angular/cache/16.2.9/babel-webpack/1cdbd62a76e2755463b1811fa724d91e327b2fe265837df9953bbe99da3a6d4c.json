{"ast":null,"code":"import { TICKETS_MOCKED } from '../../mocks/tickets.mock';\nimport { BehaviorSubject } from 'rxjs/index';\nimport * as i0 from \"@angular/core\";\nexport class TicketService {\n  constructor() {\n    /**\n     * Services Documentation:\n     * https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\n     */\n    this.ticketList = TICKETS_MOCKED;\n    /**\n     * Observable which contains the list of the tickets.\n     * Naming convention: Add '$' at the end of the variable name to highlight it as an Observable.\n     */\n    this.tickets$ = new BehaviorSubject(this.ticketList);\n  }\n  addTicket(ticket) {\n    // You need here to update the list of ticket and then update our observable (Subject) with the new list\n    // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\n    this.ticketList.push(ticket);\n    this.tickets$.next(this.ticketList);\n  }\n  deleteTicket(ticket) {\n    // code used to delete the ticket\n    /*const idTicket = this.ticketList.indexOf(ticket)\n    this.ticketList.splice(idTicket,1)\n    this.tickets$.next(this.ticketList);*/\n    // code used to turn a ticket into archived\n    const idTicket = this.ticketList.indexOf(ticket);\n    this.ticketList[idTicket].archived = true;\n    this.tickets$.next(this.ticketList);\n  }\n  changeDisplayTicketArchived(displayTicketArchived) {\n    // change if the app should display archive ticket or non-archived\n    displayTicketArchived = !displayTicketArchived;\n  }\n  static #_ = this.ɵfac = function TicketService_Factory(t) {\n    return new (t || TicketService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TicketService,\n    factory: TicketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TICKETS_MOCKED","BehaviorSubject","TicketService","constructor","ticketList","tickets$","addTicket","ticket","push","next","deleteTicket","idTicket","indexOf","archived","changeDisplayTicketArchived","displayTicketArchived","_","_2","factory","ɵfac","providedIn"],"sources":["/home/florian/Bureau/Etudes/Master 1/Web/1.6/Angular_youssef/Angular_Front/src/services/ticket/ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Ticket } from '../../models/ticket';\nimport { TICKETS_MOCKED } from '../../mocks/tickets.mock';\nimport { BehaviorSubject } from 'rxjs/index';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  /**\n   * Services Documentation:\n   * https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\n   */\n\n  private ticketList: Ticket[] = TICKETS_MOCKED;\n\n  /**\n   * Observable which contains the list of the tickets.\n   * Naming convention: Add '$' at the end of the variable name to highlight it as an Observable.\n   */\n  public tickets$: BehaviorSubject<Ticket[]> = new BehaviorSubject(this.ticketList);\n\n  constructor() {\n  }\n\n  addTicket(ticket: Ticket) {\n    // You need here to update the list of ticket and then update our observable (Subject) with the new list\n    // More info: https://angular.io/tutorial/toh-pt6#the-searchterms-rxjs-subject\n    this.ticketList.push(ticket);\n    this.tickets$.next(this.ticketList);\n  }\n\n  deleteTicket(ticket: Ticket) {\n    // code used to delete the ticket\n    /*const idTicket = this.ticketList.indexOf(ticket)\n    this.ticketList.splice(idTicket,1)\n    this.tickets$.next(this.ticketList);*/\n\n    // code used to turn a ticket into archived\n    const idTicket = this.ticketList.indexOf(ticket)\n    this.ticketList[idTicket].archived = true;\n    this.tickets$.next(this.ticketList);\n  }\n\n  changeDisplayTicketArchived(displayTicketArchived: boolean){\n    // change if the app should display archive ticket or non-archived\n    displayTicketArchived = !displayTicketArchived\n  }\n\n}\n"],"mappings":"AAEA,SAASA,cAAc,QAAQ,0BAA0B;AACzD,SAASC,eAAe,QAAQ,YAAY;;AAK5C,OAAM,MAAOC,aAAa;EAcxBC,YAAA;IAbA;;;;IAKQ,KAAAC,UAAU,GAAaJ,cAAc;IAE7C;;;;IAIO,KAAAK,QAAQ,GAA8B,IAAIJ,eAAe,CAAC,IAAI,CAACG,UAAU,CAAC;EAGjF;EAEAE,SAASA,CAACC,MAAc;IACtB;IACA;IACA,IAAI,CAACH,UAAU,CAACI,IAAI,CAACD,MAAM,CAAC;IAC5B,IAAI,CAACF,QAAQ,CAACI,IAAI,CAAC,IAAI,CAACL,UAAU,CAAC;EACrC;EAEAM,YAAYA,CAACH,MAAc;IACzB;IACA;;;IAIA;IACA,MAAMI,QAAQ,GAAG,IAAI,CAACP,UAAU,CAACQ,OAAO,CAACL,MAAM,CAAC;IAChD,IAAI,CAACH,UAAU,CAACO,QAAQ,CAAC,CAACE,QAAQ,GAAG,IAAI;IACzC,IAAI,CAACR,QAAQ,CAACI,IAAI,CAAC,IAAI,CAACL,UAAU,CAAC;EACrC;EAEAU,2BAA2BA,CAACC,qBAA8B;IACxD;IACAA,qBAAqB,GAAG,CAACA,qBAAqB;EAChD;EAAC,QAAAC,CAAA,G;qBAvCUd,aAAa;EAAA;EAAA,QAAAe,EAAA,G;WAAbf,aAAa;IAAAgB,OAAA,EAAbhB,aAAa,CAAAiB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}