{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class StudentService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = 'http://localhost:9428/api/students/'; // Replace with your actual API URL\n    this.baseUrl = 'http://localhost:9428/api/students/'; // Replace with your actual API URL\n    this.studentsList = [];\n    this.students$ = new BehaviorSubject(this.studentsList);\n    this.getStudents();\n  }\n  getStudents(id) {\n    id == undefined ? this.url = this.baseUrl + '' : this.url = this.baseUrl + id;\n    this.http.get(this.url).subscribe(students => {\n      this.studentsList = students;\n      this.students$.next(this.studentsList);\n    });\n  }\n  getOneStudent(id) {\n    this.http.get(this.url + id).subscribe(students => {\n      this.studentsList = students;\n      this.students$.next(this.studentsList);\n    });\n  }\n  addStudent(student) {\n    this.http.post(this.url, student).subscribe(newStudent => {\n      this.studentsList.push(newStudent);\n      this.students$.next(this.studentsList);\n      this.router.navigate(['/students']);\n    });\n  }\n  updateStudent(student) {\n    this.http.put(this.baseUrl + student.id, student).subscribe(updatedStudent => {\n      this.router.navigate(['/students/11']);\n    });\n  }\n  deleteStudent(id) {\n    this.http.delete(this.url + id).subscribe(newStudent => {\n      this.getStudents();\n    });\n  }\n  static #_ = this.ɵfac = function StudentService_Factory(t) {\n    return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StudentService,\n    factory: StudentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","StudentService","constructor","http","router","url","baseUrl","studentsList","students$","getStudents","id","undefined","get","subscribe","students","next","getOneStudent","addStudent","student","post","newStudent","push","navigate","updateStudent","put","updatedStudent","deleteStudent","delete","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["/home/florian/Bureau/Etudes/Master 1/Web/TP1/Angular_Front/src/services/student/student.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Student } from 'src/models/student';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentService {\n  private url = 'http://localhost:9428/api/students/'; // Replace with your actual API URL\n  private baseUrl = 'http://localhost:9428/api/students/'; // Replace with your actual API URL\n  private studentsList: Student[] = [];\n  public students$: BehaviorSubject<Student[]> = new BehaviorSubject(this.studentsList);\n\n  constructor(private http: HttpClient,private router: Router) {\n    this.getStudents();\n  }\n\n  getStudents(id?:string) {\n    id == undefined ? this.url= this.baseUrl+'' : this.url= this.baseUrl+id\n    this.http.get<Student[]>(this.url).subscribe((students: Student[]) => {\n      this.studentsList = students;\n      this.students$.next(this.studentsList);\n    });\n  }\n\n  getOneStudent(id:number) {\n    this.http.get<Student[]>(this.url+id).subscribe((students: Student[]) => {\n      this.studentsList = students;\n      this.students$.next(this.studentsList);\n    });\n  }\n\n  addStudent(student: Student) {\n    this.http.post<Student>(this.url, student).subscribe((newStudent: Student) => {\n      this.studentsList.push(newStudent);\n      this.students$.next(this.studentsList);\n      this.router.navigate(['/students']);\n    });\n  }\n\n  updateStudent(student: Student) {\n    this.http.put<Student>(this.baseUrl + student.id, student).subscribe(updatedStudent => {\n      this.router.navigate(['/students/11']);\n    });\n  }\n\n  deleteStudent(id : number) {\n    this.http.delete<Student>(this.url+id).subscribe((newStudent: Student) => {\n      this.getStudents()\n    });\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;;;;AAOtC,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB,EAASC,MAAc;IAAvC,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,MAAM,GAANA,MAAM;IAL3C,KAAAC,GAAG,GAAG,qCAAqC,CAAC,CAAC;IAC7C,KAAAC,OAAO,GAAG,qCAAqC,CAAC,CAAC;IACjD,KAAAC,YAAY,GAAc,EAAE;IAC7B,KAAAC,SAAS,GAA+B,IAAIR,eAAe,CAAC,IAAI,CAACO,YAAY,CAAC;IAGnF,IAAI,CAACE,WAAW,EAAE;EACpB;EAEAA,WAAWA,CAACC,EAAU;IACpBA,EAAE,IAAIC,SAAS,GAAG,IAAI,CAACN,GAAG,GAAE,IAAI,CAACC,OAAO,GAAC,EAAE,GAAG,IAAI,CAACD,GAAG,GAAE,IAAI,CAACC,OAAO,GAACI,EAAE;IACvE,IAAI,CAACP,IAAI,CAACS,GAAG,CAAY,IAAI,CAACP,GAAG,CAAC,CAACQ,SAAS,CAAEC,QAAmB,IAAI;MACnE,IAAI,CAACP,YAAY,GAAGO,QAAQ;MAC5B,IAAI,CAACN,SAAS,CAACO,IAAI,CAAC,IAAI,CAACR,YAAY,CAAC;IACxC,CAAC,CAAC;EACJ;EAEAS,aAAaA,CAACN,EAAS;IACrB,IAAI,CAACP,IAAI,CAACS,GAAG,CAAY,IAAI,CAACP,GAAG,GAACK,EAAE,CAAC,CAACG,SAAS,CAAEC,QAAmB,IAAI;MACtE,IAAI,CAACP,YAAY,GAAGO,QAAQ;MAC5B,IAAI,CAACN,SAAS,CAACO,IAAI,CAAC,IAAI,CAACR,YAAY,CAAC;IACxC,CAAC,CAAC;EACJ;EAEAU,UAAUA,CAACC,OAAgB;IACzB,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAU,IAAI,CAACd,GAAG,EAAEa,OAAO,CAAC,CAACL,SAAS,CAAEO,UAAmB,IAAI;MAC3E,IAAI,CAACb,YAAY,CAACc,IAAI,CAACD,UAAU,CAAC;MAClC,IAAI,CAACZ,SAAS,CAACO,IAAI,CAAC,IAAI,CAACR,YAAY,CAAC;MACtC,IAAI,CAACH,MAAM,CAACkB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;IACrC,CAAC,CAAC;EACJ;EAEAC,aAAaA,CAACL,OAAgB;IAC5B,IAAI,CAACf,IAAI,CAACqB,GAAG,CAAU,IAAI,CAAClB,OAAO,GAAGY,OAAO,CAACR,EAAE,EAAEQ,OAAO,CAAC,CAACL,SAAS,CAACY,cAAc,IAAG;MACpF,IAAI,CAACrB,MAAM,CAACkB,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;IACxC,CAAC,CAAC;EACJ;EAEAI,aAAaA,CAAChB,EAAW;IACvB,IAAI,CAACP,IAAI,CAACwB,MAAM,CAAU,IAAI,CAACtB,GAAG,GAACK,EAAE,CAAC,CAACG,SAAS,CAAEO,UAAmB,IAAI;MACvE,IAAI,CAACX,WAAW,EAAE;IACpB,CAAC,CAAC;EACJ;EAAC,QAAAmB,CAAA,G;qBA3CU3B,cAAc,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdlC,cAAc;IAAAmC,OAAA,EAAdnC,cAAc,CAAAoC,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}